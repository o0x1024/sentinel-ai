# Sentinel AI 工作流编排示例
# 本文件包含多个不同领域的工作流示例，展示系统的通用性和可扩展性

# ==========================================
# 示例1: 电商数据分析工作流
# ==========================================
ecommerce_analysis:
  metadata:
    name: "电商数据分析工作流"
    version: "1.0.0"
    description: "全面分析电商平台的销售数据、用户行为和市场趋势"
    author: "数据分析团队"
    tags: ["ecommerce", "analytics", "business_intelligence"]
    category: "business_analytics"
  
  # 工作流变量
  variables:
    analysis_date: "${input.date || '2024-01-01'}"
    region: "${input.region || 'all'}"
    product_category: "${input.category || 'all'}"
    output_format: "dashboard"
  
  # 工作流步骤
  steps:
    # 步骤1: 数据收集
    - id: "data_collection"
      name: "数据收集"
      agent: "data_collector_agent"
      action: "collect_sales_data"
      inputs:
        date_range:
          start: "${analysis_date}"
          end: "${analysis_date + 30d}"
        sources: ["sales_db", "user_behavior_db", "inventory_db"]
        filters:
          region: "${region}"
          category: "${product_category}"
      outputs:
        sales_data: "raw_sales_data"
        user_data: "raw_user_data"
        inventory_data: "raw_inventory_data"
      timeout: 300
      retry:
        max_attempts: 3
        delay: 10
    
    # 步骤2: 数据清洗
    - id: "data_cleaning"
      name: "数据清洗和预处理"
      agent: "data_processing_agent"
      action: "clean_and_preprocess"
      depends_on: ["data_collection"]
      inputs:
        raw_data:
          sales: "${raw_sales_data}"
          users: "${raw_user_data}"
          inventory: "${raw_inventory_data}"
        cleaning_rules:
          remove_duplicates: true
          handle_missing_values: "interpolate"
          outlier_detection: "iqr"
      outputs:
        clean_data: "processed_data"
        data_quality_report: "quality_report"
      parallel: false
    
    # 步骤3: 销售分析 (并行执行)
    - id: "sales_analysis"
      name: "销售趋势分析"
      agent: "data_analysis_agent"
      action: "analyze_sales_trends"
      depends_on: ["data_cleaning"]
      inputs:
        data: "${processed_data.sales}"
        analysis_type: "trend_analysis"
        metrics: ["revenue", "quantity", "profit_margin"]
        groupby: ["date", "category", "region"]
      outputs:
        sales_trends: "sales_analysis_result"
        key_insights: "sales_insights"
      parallel: true
    
    # 步骤4: 用户行为分析 (并行执行)
    - id: "user_behavior_analysis"
      name: "用户行为分析"
      agent: "data_analysis_agent"
      action: "analyze_user_behavior"
      depends_on: ["data_cleaning"]
      inputs:
        data: "${processed_data.users}"
        analysis_type: "behavioral_analysis"
        metrics: ["session_duration", "page_views", "conversion_rate"]
        segmentation: ["age_group", "location", "purchase_history"]
      outputs:
        behavior_patterns: "user_behavior_result"
        user_segments: "user_segments"
      parallel: true
    
    # 步骤5: 库存分析 (并行执行)
    - id: "inventory_analysis"
      name: "库存优化分析"
      agent: "data_analysis_agent"
      action: "analyze_inventory"
      depends_on: ["data_cleaning"]
      inputs:
        data: "${processed_data.inventory}"
        analysis_type: "inventory_optimization"
        metrics: ["turnover_rate", "stock_level", "demand_forecast"]
      outputs:
        inventory_insights: "inventory_analysis_result"
        reorder_recommendations: "reorder_suggestions"
      parallel: true
    
    # 步骤6: AI洞察生成
    - id: "ai_insights"
      name: "AI智能洞察生成"
      agent: "ai_insight_agent"
      action: "generate_business_insights"
      depends_on: ["sales_analysis", "user_behavior_analysis", "inventory_analysis"]
      inputs:
        sales_data: "${sales_analysis_result}"
        user_data: "${user_behavior_result}"
        inventory_data: "${inventory_analysis_result}"
        context:
          business_goals: ["increase_revenue", "improve_customer_retention", "optimize_inventory"]
          market_conditions: "${input.market_conditions || 'stable'}"
      outputs:
        ai_insights: "business_insights"
        recommendations: "action_recommendations"
    
    # 步骤7: 报告生成
    - id: "report_generation"
      name: "综合报告生成"
      agent: "reporting_agent"
      action: "generate_comprehensive_report"
      depends_on: ["ai_insights"]
      inputs:
        insights: "${business_insights}"
        recommendations: "${action_recommendations}"
        raw_analysis:
          sales: "${sales_analysis_result}"
          users: "${user_behavior_result}"
          inventory: "${inventory_analysis_result}"
        template: "ecommerce_executive_dashboard"
        format: "${output_format}"
      outputs:
        report_url: "final_report"
        dashboard_url: "interactive_dashboard"
    
    # 步骤8: 通知发送
    - id: "notification"
      name: "结果通知"
      agent: "notification_agent"
      action: "send_notification"
      depends_on: ["report_generation"]
      inputs:
        recipients: "${input.notification_recipients || ['team@company.com']}"
        message:
          subject: "电商数据分析报告已生成"
          body: "您的电商数据分析报告已完成，请查看: ${final_report}"
          attachments: ["${final_report}"]
        channels: ["email", "slack"]
      condition: "${input.send_notification !== false}"
  
  # 错误处理配置
  error_handling:
    on_error: "continue"  # continue, stop, retry
    retry_failed_steps: true
    max_retries: 2
    notification_on_failure: true
  
  # 调度配置
  schedule:
    type: "cron"
    expression: "0 6 * * 1"  # 每周一早上6点执行
    timezone: "Asia/Shanghai"

---

# ==========================================
# 示例2: DevOps CI/CD 工作流
# ==========================================
devops_cicd:
  metadata:
    name: "智能CI/CD工作流"
    version: "2.0.0"
    description: "自动化代码构建、测试、部署和监控的完整DevOps流程"
    author: "DevOps团队"
    tags: ["devops", "cicd", "automation", "deployment"]
    category: "software_development"
  
  variables:
    repository_url: "${trigger.repository_url}"
    branch: "${trigger.branch || 'main'}"
    environment: "${input.environment || 'staging'}"
    deploy_strategy: "${input.deploy_strategy || 'blue_green'}"
  
  steps:
    # 代码检出
    - id: "checkout"
      name: "代码检出"
      agent: "git_agent"
      action: "checkout_code"
      inputs:
        repository: "${repository_url}"
        branch: "${branch}"
        depth: 1
      outputs:
        source_code: "code_directory"
        commit_hash: "current_commit"
    
    # 代码质量检查
    - id: "code_quality"
      name: "代码质量检查"
      agent: "code_analysis_agent"
      action: "analyze_code_quality"
      depends_on: ["checkout"]
      inputs:
        source_path: "${code_directory}"
        rules: ["sonarqube", "eslint", "security_scan"]
        fail_on_issues: true
      outputs:
        quality_report: "code_quality_result"
        security_issues: "security_scan_result"
    
    # 单元测试
    - id: "unit_tests"
      name: "单元测试"
      agent: "testing_agent"
      action: "run_unit_tests"
      depends_on: ["checkout"]
      inputs:
        source_path: "${code_directory}"
        test_framework: "jest"
        coverage_threshold: 80
      outputs:
        test_results: "unit_test_results"
        coverage_report: "test_coverage"
      parallel: true
    
    # 构建应用
    - id: "build"
      name: "应用构建"
      agent: "build_agent"
      action: "build_application"
      depends_on: ["code_quality", "unit_tests"]
      inputs:
        source_path: "${code_directory}"
        build_config:
          target: "production"
          optimization: true
          minify: true
        docker_build: true
      outputs:
        build_artifacts: "build_output"
        docker_image: "app_image"
    
    # 集成测试
    - id: "integration_tests"
      name: "集成测试"
      agent: "testing_agent"
      action: "run_integration_tests"
      depends_on: ["build"]
      inputs:
        application_image: "${app_image}"
        test_environment: "test"
        test_suites: ["api_tests", "e2e_tests"]
      outputs:
        integration_results: "integration_test_results"
    
    # 安全扫描
    - id: "security_scan"
      name: "容器安全扫描"
      agent: "security_agent"
      action: "scan_container_security"
      depends_on: ["build"]
      inputs:
        image: "${app_image}"
        scan_types: ["vulnerability", "malware", "secrets"]
        severity_threshold: "medium"
      outputs:
        security_report: "container_security_result"
      parallel: true
    
    # 性能测试
    - id: "performance_tests"
      name: "性能测试"
      agent: "performance_agent"
      action: "run_load_tests"
      depends_on: ["integration_tests"]
      inputs:
        target_url: "${test_environment_url}"
        test_scenarios:
          - name: "normal_load"
            users: 100
            duration: "5m"
          - name: "peak_load"
            users: 500
            duration: "2m"
      outputs:
        performance_report: "load_test_results"
      condition: "${environment === 'staging'}"
    
    # 部署决策
    - id: "deployment_decision"
      name: "AI部署决策"
      agent: "ai_decision_agent"
      action: "make_deployment_decision"
      depends_on: ["security_scan", "performance_tests"]
      inputs:
        test_results:
          unit: "${unit_test_results}"
          integration: "${integration_test_results}"
          performance: "${load_test_results}"
          security: "${container_security_result}"
        deployment_history: "${get_deployment_history()}"
        risk_tolerance: "medium"
      outputs:
        deployment_approved: "deploy_decision"
        risk_assessment: "deployment_risk"
    
    # 部署应用
    - id: "deploy"
      name: "应用部署"
      agent: "deployment_agent"
      action: "deploy_application"
      depends_on: ["deployment_decision"]
      condition: "${deploy_decision === true}"
      inputs:
        image: "${app_image}"
        environment: "${environment}"
        strategy: "${deploy_strategy}"
        config:
          replicas: 3
          resources:
            cpu: "500m"
            memory: "1Gi"
          health_check:
            path: "/health"
            interval: 30
      outputs:
        deployment_url: "app_url"
        deployment_id: "deploy_id"
    
    # 部署后监控
    - id: "post_deploy_monitoring"
      name: "部署后监控"
      agent: "monitoring_agent"
      action: "setup_monitoring"
      depends_on: ["deploy"]
      inputs:
        application_url: "${app_url}"
        deployment_id: "${deploy_id}"
        monitoring_duration: "30m"
        alerts:
          - metric: "error_rate"
            threshold: 5
            action: "rollback"
          - metric: "response_time"
            threshold: 2000
            action: "alert"
      outputs:
        monitoring_status: "monitor_result"
    
    # 通知团队
    - id: "team_notification"
      name: "团队通知"
      agent: "notification_agent"
      action: "send_deployment_notification"
      depends_on: ["post_deploy_monitoring"]
      inputs:
        deployment_status: "${deploy_decision ? 'success' : 'skipped'}"
        application_url: "${app_url}"
        test_results:
          quality: "${code_quality_result}"
          tests: "${unit_test_results}"
          security: "${container_security_result}"
        recipients: ["dev-team@company.com", "ops-team@company.com"]
        channels: ["slack", "email"]
  
  # 触发器配置
  triggers:
    - type: "git_push"
      repository: "${repository_url}"
      branches: ["main", "develop"]
    - type: "pull_request"
      action: "opened"
    - type: "schedule"
      cron: "0 2 * * *"  # 每天凌晨2点
  
  error_handling:
    on_error: "stop"
    rollback_on_failure: true
    notification_on_failure: true

---

# ==========================================
# 示例3: 内容创作工作流
# ==========================================
content_creation:
  metadata:
    name: "AI内容创作工作流"
    version: "1.0.0"
    description: "自动化内容创作、优化和发布的完整流程"
    author: "内容团队"
    tags: ["content", "ai", "marketing", "automation"]
    category: "content_marketing"
  
  variables:
    content_topic: "${input.topic}"
    target_audience: "${input.audience || 'general'}"
    content_type: "${input.type || 'blog_post'}"
    publish_platforms: "${input.platforms || ['website', 'social_media']}"
    content_length: "${input.length || 'medium'}"
  
  steps:
    # 主题研究
    - id: "topic_research"
      name: "主题研究和趋势分析"
      agent: "research_agent"
      action: "research_topic"
      inputs:
        topic: "${content_topic}"
        research_depth: "comprehensive"
        sources: ["google_trends", "social_media", "news", "academic"]
        competitor_analysis: true
      outputs:
        research_data: "topic_research_result"
        trending_keywords: "keyword_list"
        competitor_content: "competitor_analysis"
    
    # SEO关键词分析
    - id: "seo_analysis"
      name: "SEO关键词分析"
      agent: "seo_agent"
      action: "analyze_keywords"
      depends_on: ["topic_research"]
      inputs:
        primary_topic: "${content_topic}"
        trending_keywords: "${keyword_list}"
        target_audience: "${target_audience}"
        content_type: "${content_type}"
      outputs:
        seo_keywords: "optimized_keywords"
        content_structure: "seo_structure"
      parallel: true
    
    # 内容大纲生成
    - id: "outline_generation"
      name: "内容大纲生成"
      agent: "ai_writer_agent"
      action: "generate_outline"
      depends_on: ["topic_research"]
      inputs:
        topic: "${content_topic}"
        research_data: "${topic_research_result}"
        audience: "${target_audience}"
        content_type: "${content_type}"
        length: "${content_length}"
      outputs:
        content_outline: "article_outline"
        key_points: "main_points"
      parallel: true
    
    # 内容创作
    - id: "content_writing"
      name: "AI内容创作"
      agent: "ai_writer_agent"
      action: "write_content"
      depends_on: ["seo_analysis", "outline_generation"]
      inputs:
        outline: "${article_outline}"
        keywords: "${optimized_keywords}"
        seo_structure: "${seo_structure}"
        tone: "professional"
        style: "engaging"
        include_examples: true
      outputs:
        draft_content: "content_draft"
        word_count: "content_stats"
    
    # 内容优化
    - id: "content_optimization"
      name: "内容质量优化"
      agent: "content_optimizer_agent"
      action: "optimize_content"
      depends_on: ["content_writing"]
      inputs:
        content: "${content_draft}"
        optimization_goals:
          - "readability"
          - "seo_score"
          - "engagement"
          - "factual_accuracy"
        target_metrics:
          readability_score: 70
          seo_score: 85
          keyword_density: 2.5
      outputs:
        optimized_content: "final_content"
        optimization_report: "content_metrics"
    
    # 图片生成
    - id: "image_generation"
      name: "配图生成"
      agent: "image_ai_agent"
      action: "generate_images"
      depends_on: ["content_optimization"]
      inputs:
        content: "${final_content}"
        image_count: 3
        style: "professional"
        format: "web_optimized"
        alt_text_generation: true
      outputs:
        generated_images: "content_images"
        image_metadata: "image_info"
      parallel: true
    
    # 内容审核
    - id: "content_review"
      name: "内容合规审核"
      agent: "content_moderator_agent"
      action: "review_content"
      depends_on: ["content_optimization"]
      inputs:
        content: "${final_content}"
        review_criteria:
          - "brand_guidelines"
          - "legal_compliance"
          - "factual_accuracy"
          - "tone_consistency"
        auto_approve_threshold: 90
      outputs:
        review_result: "content_approval"
        suggested_changes: "review_feedback"
      parallel: true
    
    # 多平台适配
    - id: "platform_adaptation"
      name: "多平台内容适配"
      agent: "content_adapter_agent"
      action: "adapt_for_platforms"
      depends_on: ["image_generation", "content_review"]
      condition: "${content_approval.approved === true}"
      inputs:
        content: "${final_content}"
        images: "${content_images}"
        platforms: "${publish_platforms}"
        adaptations:
          website:
            format: "html"
            seo_optimization: true
          social_media:
            create_snippets: true
            hashtag_generation: true
          email:
            newsletter_format: true
      outputs:
        platform_content: "adapted_content"
    
    # 发布调度
    - id: "content_scheduling"
      name: "内容发布调度"
      agent: "publishing_agent"
      action: "schedule_publication"
      depends_on: ["platform_adaptation"]
      inputs:
        content: "${adapted_content}"
        schedule:
          website: "immediate"
          social_media: "${input.social_schedule || 'optimal_time'}"
          email: "${input.email_schedule || 'next_newsletter'}"
        approval_required: false
      outputs:
        publication_schedule: "publish_plan"
        tracking_urls: "content_tracking"
    
    # 性能监控
    - id: "performance_tracking"
      name: "内容性能跟踪"
      agent: "analytics_agent"
      action: "setup_content_tracking"
      depends_on: ["content_scheduling"]
      inputs:
        published_content: "${publish_plan}"
        tracking_urls: "${content_tracking}"
        metrics_to_track:
          - "page_views"
          - "engagement_rate"
          - "social_shares"
          - "conversion_rate"
        tracking_duration: "30d"
      outputs:
        tracking_setup: "analytics_config"
  
  # 工作流调度
  schedule:
    type: "manual"  # 手动触发
    auto_retry: true
  
  error_handling:
    on_error: "continue"
    human_review_on_failure: true

---

# ==========================================
# 示例4: 客户服务自动化工作流
# ==========================================
customer_service:
  metadata:
    name: "智能客户服务工作流"
    version: "1.0.0"
    description: "自动化客户问题处理、分类和响应的完整流程"
    author: "客服团队"
    tags: ["customer_service", "ai", "automation", "support"]
    category: "customer_support"
  
  variables:
    ticket_id: "${trigger.ticket_id}"
    customer_id: "${trigger.customer_id}"
    priority: "${trigger.priority || 'normal'}"
    channel: "${trigger.channel}"
  
  steps:
    # 问题分类
    - id: "ticket_classification"
      name: "问题智能分类"
      agent: "nlp_agent"
      action: "classify_ticket"
      inputs:
        ticket_content: "${trigger.content}"
        customer_history: "${get_customer_history(customer_id)}"
        classification_model: "customer_support_v2"
      outputs:
        category: "ticket_category"
        urgency: "ticket_urgency"
        sentiment: "customer_sentiment"
        confidence: "classification_confidence"
    
    # 自动回复检查
    - id: "auto_response_check"
      name: "自动回复可行性检查"
      agent: "decision_agent"
      action: "check_auto_response_eligibility"
      depends_on: ["ticket_classification"]
      inputs:
        category: "${ticket_category}"
        urgency: "${ticket_urgency}"
        confidence: "${classification_confidence}"
        customer_tier: "${get_customer_tier(customer_id)}"
        auto_response_threshold: 85
      outputs:
        can_auto_respond: "auto_response_eligible"
        recommended_action: "next_action"
    
    # 知识库搜索
    - id: "knowledge_search"
      name: "知识库智能搜索"
      agent: "knowledge_agent"
      action: "search_solutions"
      depends_on: ["ticket_classification"]
      condition: "${auto_response_eligible === true}"
      inputs:
        query: "${trigger.content}"
        category: "${ticket_category}"
        search_depth: "comprehensive"
        include_similar_cases: true
      outputs:
        solutions: "knowledge_results"
        similar_tickets: "related_cases"
      parallel: true
    
    # 客户历史分析
    - id: "customer_analysis"
      name: "客户历史分析"
      agent: "customer_analytics_agent"
      action: "analyze_customer_profile"
      depends_on: ["ticket_classification"]
      inputs:
        customer_id: "${customer_id}"
        analysis_scope:
          - "purchase_history"
          - "support_history"
          - "interaction_patterns"
          - "satisfaction_scores"
      outputs:
        customer_profile: "customer_insights"
        risk_factors: "customer_risks"
      parallel: true
    
    # 自动回复生成
    - id: "auto_response_generation"
      name: "智能回复生成"
      agent: "response_generator_agent"
      action: "generate_response"
      depends_on: ["knowledge_search", "customer_analysis"]
      condition: "${auto_response_eligible === true && knowledge_results.confidence > 80}"
      inputs:
        ticket_content: "${trigger.content}"
        solutions: "${knowledge_results}"
        customer_profile: "${customer_insights}"
        response_tone: "helpful_professional"
        personalization: true
      outputs:
        generated_response: "auto_response"
        response_confidence: "response_quality"
    
    # 人工分配
    - id: "human_assignment"
      name: "人工客服分配"
      agent: "assignment_agent"
      action: "assign_to_agent"
      depends_on: ["auto_response_check"]
      condition: "${auto_response_eligible === false || response_quality < 85}"
      inputs:
        ticket_category: "${ticket_category}"
        urgency: "${ticket_urgency}"
        customer_tier: "${get_customer_tier(customer_id)}"
        agent_skills: "${get_available_agents()}"
        workload_balancing: true
      outputs:
        assigned_agent: "human_agent"
        estimated_response_time: "eta"
    
    # 响应发送
    - id: "response_delivery"
      name: "响应发送"
      agent: "communication_agent"
      action: "send_response"
      depends_on: ["auto_response_generation", "human_assignment"]
      inputs:
        response_content: "${auto_response || '您的问题已分配给专业客服，预计' + eta + '内回复'}"
        customer_id: "${customer_id}"
        ticket_id: "${ticket_id}"
        channel: "${channel}"
        include_tracking: true
      outputs:
        delivery_status: "response_sent"
        tracking_id: "message_tracking"
    
    # 满意度跟踪
    - id: "satisfaction_tracking"
      name: "满意度跟踪设置"
      agent: "feedback_agent"
      action: "setup_satisfaction_survey"
      depends_on: ["response_delivery"]
      inputs:
        ticket_id: "${ticket_id}"
        customer_id: "${customer_id}"
        survey_delay: "2h"  # 2小时后发送满意度调查
        survey_type: "quick_rating"
      outputs:
        survey_scheduled: "feedback_tracking"
    
    # 升级检查
    - id: "escalation_check"
      name: "升级条件检查"
      agent: "escalation_agent"
      action: "check_escalation_needed"
      depends_on: ["response_delivery"]
      inputs:
        ticket_urgency: "${ticket_urgency}"
        customer_sentiment: "${customer_sentiment}"
        customer_tier: "${get_customer_tier(customer_id)}"
        response_time: "${get_response_time()}"
        escalation_rules: "${get_escalation_rules()}"
      outputs:
        escalation_needed: "should_escalate"
        escalation_reason: "escalation_trigger"
    
    # 管理层通知
    - id: "management_notification"
      name: "管理层通知"
      agent: "notification_agent"
      action: "notify_management"
      depends_on: ["escalation_check"]
      condition: "${should_escalate === true}"
      inputs:
        ticket_details:
          id: "${ticket_id}"
          customer: "${customer_id}"
          category: "${ticket_category}"
          urgency: "${ticket_urgency}"
        escalation_reason: "${escalation_trigger}"
        recipients: ["support-manager@company.com"]
      outputs:
        notification_sent: "mgmt_notified"
  
  # 触发器
  triggers:
    - type: "ticket_created"
      source: "support_system"
    - type: "email_received"
      source: "support_email"
    - type: "chat_initiated"
      source: "live_chat"
  
  error_handling:
    on_error: "escalate_to_human"
    fallback_response: "我们正在处理您的问题，请稍候"
    notification_on_failure: true

---

# ==========================================
# 示例5: 金融风险评估工作流
# ==========================================
financial_risk_assessment:
  metadata:
    name: "智能金融风险评估工作流"
    version: "1.0.0"
    description: "自动化金融产品风险评估和投资建议生成"
    author: "风控团队"
    tags: ["finance", "risk_assessment", "ai", "compliance"]
    category: "financial_services"
  
  variables:
    client_id: "${input.client_id}"
    assessment_type: "${input.type || 'comprehensive'}"
    investment_amount: "${input.amount}"
    time_horizon: "${input.horizon || '12m'}"
  
  steps:
    # 客户数据收集
    - id: "client_data_collection"
      name: "客户数据收集"
      agent: "data_collector_agent"
      action: "collect_client_data"
      inputs:
        client_id: "${client_id}"
        data_sources:
          - "client_profile"
          - "transaction_history"
          - "credit_score"
          - "investment_history"
          - "risk_questionnaire"
      outputs:
        client_profile: "client_data"
        financial_history: "financial_records"
    
    # 市场数据分析
    - id: "market_analysis"
      name: "市场环境分析"
      agent: "market_analysis_agent"
      action: "analyze_market_conditions"
      inputs:
        analysis_scope: "global"
        asset_classes: ["stocks", "bonds", "commodities", "crypto"]
        time_frame: "${time_horizon}"
        include_volatility: true
      outputs:
        market_outlook: "market_analysis_result"
        volatility_forecast: "volatility_data"
      parallel: true
    
    # 风险承受能力评估
    - id: "risk_tolerance_assessment"
      name: "风险承受能力评估"
      agent: "risk_assessment_agent"
      action: "assess_risk_tolerance"
      depends_on: ["client_data_collection"]
      inputs:
        client_data: "${client_data}"
        financial_records: "${financial_records}"
        assessment_model: "comprehensive_v3"
        regulatory_requirements: "mifid_ii"
      outputs:
        risk_profile: "client_risk_profile"
        risk_score: "risk_tolerance_score"
    
    # 投资组合分析
    - id: "portfolio_analysis"
      name: "现有投资组合分析"
      agent: "portfolio_agent"
      action: "analyze_current_portfolio"
      depends_on: ["client_data_collection"]
      inputs:
        client_holdings: "${financial_records.current_portfolio}"
        benchmark_indices: ["S&P500", "MSCI_World", "Bond_Index"]
        analysis_metrics:
          - "diversification"
          - "risk_return"
          - "correlation"
          - "performance"
      outputs:
        portfolio_analysis: "current_portfolio_metrics"
        diversification_score: "portfolio_diversification"
      parallel: true
    
    # AI风险建模
    - id: "ai_risk_modeling"
      name: "AI风险建模"
      agent: "ai_risk_agent"
      action: "build_risk_model"
      depends_on: ["market_analysis", "risk_tolerance_assessment", "portfolio_analysis"]
      inputs:
        client_profile: "${client_risk_profile}"
        market_data: "${market_analysis_result}"
        portfolio_data: "${current_portfolio_metrics}"
        modeling_approach: "monte_carlo"
        simulation_runs: 10000
        confidence_levels: [95, 99]
      outputs:
        risk_model: "ai_risk_assessment"
        var_calculations: "value_at_risk"
        scenario_analysis: "stress_test_results"
    
    # 合规检查
    - id: "compliance_check"
      name: "合规性检查"
      agent: "compliance_agent"
      action: "check_regulatory_compliance"
      depends_on: ["ai_risk_modeling"]
      inputs:
        risk_assessment: "${ai_risk_assessment}"
        client_profile: "${client_risk_profile}"
        investment_amount: "${investment_amount}"
        regulatory_frameworks: ["mifid_ii", "basel_iii", "local_regulations"]
        suitability_rules: "strict"
      outputs:
        compliance_status: "compliance_result"
        regulatory_warnings: "compliance_issues"
    
    # 投资建议生成
    - id: "investment_recommendation"
      name: "投资建议生成"
      agent: "advisory_agent"
      action: "generate_investment_advice"
      depends_on: ["compliance_check"]
      condition: "${compliance_result.approved === true}"
      inputs:
        risk_model: "${ai_risk_assessment}"
        client_profile: "${client_risk_profile}"
        market_outlook: "${market_analysis_result}"
        investment_amount: "${investment_amount}"
        time_horizon: "${time_horizon}"
        optimization_objective: "risk_adjusted_return"
      outputs:
        investment_recommendations: "advisory_report"
        portfolio_allocation: "recommended_allocation"
    
    # 报告生成
    - id: "report_generation"
      name: "风险评估报告生成"
      agent: "reporting_agent"
      action: "generate_risk_report"
      depends_on: ["investment_recommendation"]
      inputs:
        risk_assessment: "${ai_risk_assessment}"
        compliance_status: "${compliance_result}"
        recommendations: "${advisory_report}"
        client_data: "${client_data}"
        report_template: "institutional_risk_assessment"
        include_disclaimers: true
      outputs:
        risk_report: "final_risk_report"
        executive_summary: "report_summary"
    
    # 客户通知
    - id: "client_notification"
      name: "客户通知"
      agent: "notification_agent"
      action: "send_assessment_results"
      depends_on: ["report_generation"]
      inputs:
        client_id: "${client_id}"
        report: "${final_risk_report}"
        summary: "${report_summary}"
        delivery_method: "secure_portal"
        follow_up_required: true
      outputs:
        notification_status: "client_notified"
  
  error_handling:
    on_error: "manual_review"
    compliance_failure_action: "escalate_to_compliance_officer"
    data_quality_threshold: 95
  
  schedule:
    type: "on_demand"
    periodic_review: "quarterly"