export default {
  common: {
    loading: 'Loading...',
    error: 'An error occurred',
    success: 'Success',
    cancel: 'Cancel',
    confirm: 'Confirm',
    save: 'Save',
    delete: 'Delete',
    edit: 'Edit',
    add: 'Add',
    search: 'Search',
    refresh: 'Refresh',
    close: 'Close',
    minimize: 'Minimize',
    settings: 'Settings',
    position: 'Position',
    dragMode: 'Drag Mode',
    saving: 'Saving...',
    saveSettings: 'Save Settings',
    resetDefaults: 'Reset Defaults',
    saved: 'Saved',
    neverSaved: 'Never Saved',
    configStatus: 'Config Status',
    loaded: 'Loaded',
    saveFailed: 'Save failed',
    resetConfirm: 'Are you sure you want to reset all settings to default? This action cannot be undone.',
    viewDetails: 'View Details',
    moreInfo: 'More Info',
    noData: 'No Data',
    status: 'Status',
    actions: 'Actions',
    date: 'Date',
    time: 'Time',
    name: 'Name',
    description: 'Description',
    type: 'Type',
    severity: 'Severity',
    high: 'High',
    medium: 'Medium',
    low: 'Low',
    info: 'Info',
    critical: 'Critical',
    target: 'Target',
    progress: 'Progress',
    completed: 'Completed',
    inProgress: 'In Progress',
    pending: 'Pending',
    failed: 'Failed',
    cancelled: 'Cancelled',
    create: 'Create',
    update: 'Update',
    details: 'Details',
    statistics: 'Statistics',
    overview: 'Overview',
    today: 'Today',
    thisWeek: 'This Week',
    thisMonth: 'This Month',
    total: 'Total',
    startDate: 'Start Date',
    endDate: 'End Date',
    id: 'ID',
    all: 'All',
    warning: 'Warning',
    connected: 'Connected',
    disconnected: 'Disconnected',
    other: 'Other',
    operations: 'Operations',
    confirmDelete: 'Are you sure you want to delete this?',
    yes: 'Yes',
    no: 'No',
    ok: 'OK',
    view: 'View',
    reset: 'Reset',
    required: 'Required',
    export: 'Export',
    duplicate: 'Duplicate',
    select: 'Select',
    已加载: 'Loaded',
  },
  aiChat: {
    title: 'AI Assistant',
    subtitle: 'Chat with your favorite AI models in this window',
    welcome: 'Hello! I am your AI assistant. How can I help you?',
    inputPlaceholder: 'Enter your question or command, supports uploading images and documents... Enter # to reference notes',
    thinking: 'Thinking...',
    emptyState: 'No messages yet',
    emptyStateHint: 'Start your conversation!',
    modelSelector: 'AI Model',
    refreshModels: 'Refresh model list',
    conversationHistory: 'Conversation History',
    newConversation: 'New Conversation',
    clearConversation: 'Clear Conversation',
    exportConversation: 'Export Conversation',
    selectRole: 'Select Role',
    roleConversationStart: 'Now starting to talk as **{role}**.',
    newConversationTitle: 'New Conversation',
    currentRole: 'Current Role',
    clearRole: 'Clear Role',
    noModelSelected: 'No AI model selected',
    invalidModelSelected: 'Invalid model selection',
    errorCreatingConversation: 'Error creating conversation',
  },
  tools: {
    executionStatus: {
      pending: 'Pending',
      running: 'Running...',
      success: 'Success',
      error: 'Error',
      unknown: 'Unknown Status'
    },
    parameters: 'Parameters:',
    result: 'Result:',
    error: 'Error:',
    execution: 'Tool Execution',
    executionSuccess: 'Execution Successful',
    executionFailed: 'Execution Failed',
  },
  positions: {
    'top-left': 'Top Left',
    'top-center': 'Top Center',
    'top-right': 'Top Right',
    'left': 'Left',
    'center': 'Center',
    'right': 'Right',
    'bottom-left': 'Bottom Left',
    'bottom-center': 'Bottom Center',
    'bottom-right': 'Bottom Right',
  },
  language: {
    name: 'English',
    switchTo: 'Switch to {lang}',
    current: 'Current language: {lang}'
  },
  settings: {
    title: 'Settings',
    language: 'Language Settings',
    selectLanguage: 'Select Language',
    languageNote: 'Language changes take effect immediately, no restart required',
    aiSettings: 'AI Service Settings',
    aiServiceConfig: 'AI Service Configuration',
    apiKeys: 'API Keys',
    providers: 'Providers',
    models: 'Models',
    advanced: 'Advanced Settings',
    database: {
      title: 'Database Settings',
      backupNotImplemented: 'Database backup feature will be implemented after Tauri integration',
      optimizeNotImplemented: 'Database optimization feature will be implemented after Tauri integration',
      backup: 'Backup Database',
      restore: 'Restore Database',
      optimize: 'Optimize Database',
      management: 'Database Management'
    },
    performance: 'Performance Settings',
    security: 'Security Settings',
    about: 'About',
    version: 'Version',
    addProvider: 'Add Provider',
    editProvider: 'Edit Provider',
    deleteProvider: 'Delete Provider',
    testConnection: 'Test Connection',
    connectionSuccessful: 'Connection Successful',
    connectionFailed: 'Connection Failed',
    apiKeyPlaceholder: 'Enter your API Key',
    apiKeyRequired: 'API Key is required',
    modelRequired: 'Model selection is required',
    providerRequired: 'Provider selection is required',
    categories: {
      ai: 'AI Services',
      scan: 'Scan Configuration',
      system: 'System Settings'
    },
    ai: {
      providerStatus: 'AI Provider Status Overview',
      connected: 'Connected',
      disconnected: 'Disconnected',
      modelsCount: ' models',
      enable: 'Enable',
      apiKey: 'API Key',
      apiBaseUrl: 'API Base URL',
      organizationId: 'Organization ID (Optional)',
      defaultModel: 'Default Model',
      temperature: 'Temperature',
      temperatureHint: 'Lower values make the output more deterministic, higher values make it more random and creative',
      maxTokens: 'Max Tokens',
      maxTokensHint: 'Limit the maximum length of the AI response',
      availableModels: 'Available Models',
      modelName: 'Model',
      contextLength: 'Context Length',
      features: 'Features',
      status: 'Status',
      streaming: 'Streaming',
      tools: 'Tools',
      vision: 'Vision',
      available: 'Available',
      unavailable: 'Unavailable',
      saveConfig: 'Save AI Configuration',
      testingConnection: 'Testing {provider} connection...',
      connectionTestSuccess: 'Connection test successful',
      connectionTestFailed: 'Connection test failed',
      configSaved: 'AI configuration saved',
      customProvider: 'Add Custom AI Provider',
      providerName: 'Provider Name',
      providerNamePlaceholder: 'e.g., Custom GPT',
      modelId: 'Model ID',
      modelIdPlaceholder: 'e.g., gpt-3.5-turbo',
      testCustomProvider: 'Test Connection',
      addCustomProvider: 'Add Provider',
      fillCustomProviderInfo: 'Please fill in the complete custom provider information',
      customProviderAddSuccess: 'Custom provider added successfully!',
      customProviderAddFailed: 'Failed to add',
      usageStats: 'AI Usage Statistics',
      inputTokens: 'Input Tokens',
      outputTokens: 'Output Tokens',
      totalTokens: 'Total Tokens',
      estimatedCost: 'Estimated Cost'
    },
    themes: {
      light: 'Light Theme',
      dark: 'Dark Theme',
      corporate: 'Corporate Theme'
    },
    system: {
      theme: 'UI Theme',
      lightTheme: 'Light Theme',
      darkTheme: 'Dark Theme',
      cupcakeTheme: 'Cupcake Theme',
      corporateTheme: 'Corporate Theme',
      fontSize: 'Font Size',
      small: 'Small (14px)',
      normal: 'Normal (16px)',
      large: 'Large (18px)',
      xlarge: 'Extra Large (20px)',
      fontSizeHint: 'Adjust UI font size to suit different needs',
      uiScale: 'UI Scale',
      uiScaleHint: 'Overall UI scaling percentage',
      autoStart: 'Start on boot',
      minimizeToTray: 'Minimize to system tray',
      databaseManagement: 'Database Management',
      backupDatabase: 'Backup Database',
      optimizeDatabase: 'Optimize Database'
    },
    scan: {
      maxConcurrentTasks: 'Max Concurrent Tasks',
      defaultTimeout: 'Default Timeout (minutes)'
    },
    lastSaved: 'Last saved: {time}'
  },
  dashboard: {
    title: 'Dashboard',
    welcome: 'Welcome Back',
    summary: 'Summary',
    recentActivity: 'Recent Activity',
    todayStats: 'Today\'s Stats',
    activeScans: 'Active Scans',
    vulnerabilitiesFound: 'Vulnerabilities Found',
    projectsMonitored: 'Projects Monitored',
    earningsToday: 'Today\'s Earnings',
    scanProgress: 'Scan Progress',
    recentVulnerabilities: 'Recent Vulnerabilities',
    topProjects: 'Top Projects',
    systemStatus: 'System Status',
    cpuUsage: 'CPU Usage',
    memoryUsage: 'Memory Usage',
    diskUsage: 'Disk Usage',
    networkUsage: 'Network Usage',
    quickActions: 'Quick Actions',
    startNewScan: 'Start New Scan',
    viewAllVulnerabilities: 'View All Vulnerabilities',
    manageProjects: 'Manage Projects',
    checkEarnings: 'Check Earnings'
  },
  scanTasks: {
    title: 'Scan Tasks',
    newScan: 'New Scan',
    activeTasks: 'Active Tasks',
    completedTasks: 'Completed Tasks',
    scheduledTasks: 'Scheduled Tasks',
    taskDetails: 'Task Details',
    taskName: 'Task Name',
    taskType: 'Task Type',
    targetUrl: 'Target URL',
    targetIp: 'Target IP',
    scanScope: 'Scan Scope',
    scanOptions: 'Scan Options',
    scanParameters: 'Scan Parameters',
    startTime: 'Start Time',
    endTime: 'End Time',
    duration: 'Duration',
    status: 'Status',
    progress: 'Progress',
    results: 'Results',
    vulnerabilitiesFound: 'Vulnerabilities Found',
    logs: 'Logs',
    actions: 'Actions',
    pause: 'Pause',
    resume: 'Resume',
    stop: 'Stop',
    delete: 'Delete',
    export: 'Export',
    viewReport: 'View Report',
    scanTypes: {
      fullScan: 'Full Scan',
      quickScan: 'Quick Scan',
      vulnerabilityScan: 'Vulnerability Scan',
      portScan: 'Port Scan',
      webScan: 'Web Scan',
      networkScan: 'Network Scan',
      custom: 'Custom Scan'
    },
    filters: {
      all: 'All',
      active: 'Active',
      completed: 'Completed',
      failed: 'Failed',
      scheduled: 'Scheduled'
    },
    form: {
      targetPlaceholder: 'Enter target URL or IP address',
      namePlaceholder: 'Enter scan task name',
      descriptionPlaceholder: 'Enter scan task description',
      selectScanType: 'Select scan type',
      advancedOptions: 'Advanced Options',
      scheduleTask: 'Schedule Task',
      runNow: 'Run Now',
      scheduleFor: 'Schedule for',
      recurring: 'Recurring',
      daily: 'Daily',
      weekly: 'Weekly',
      monthly: 'Monthly',
      selectTime: 'Select Time',
      submit: 'Submit'
    },
    notifications: {
      scanStarted: 'Scan started',
      scanCompleted: 'Scan completed',
      scanFailed: 'Scan failed',
      scanPaused: 'Scan paused',
      scanResumed: 'Scan resumed',
      scanStopped: 'Scan stopped',
      scanDeleted: 'Scan deleted'
    }
  },
  vulnerabilities: {
    title: 'Vulnerabilities',
    newVulnerability: 'New Vulnerability',
    allVulnerabilities: 'All Vulnerabilities',
    criticalVulnerabilities: 'Critical Vulnerabilities',
    highVulnerabilities: 'High Vulnerabilities',
    mediumVulnerabilities: 'Medium Vulnerabilities',
    lowVulnerabilities: 'Low Vulnerabilities',
    infoVulnerabilities: 'Informational Vulnerabilities',
    vulnerabilityDetails: 'Vulnerability Details',
    vulnerabilityName: 'Vulnerability Name',
    vulnerabilityType: 'Vulnerability Type',
    severity: 'Severity',
    cvss: 'CVSS Score',
    cve: 'CVE ID',
    affectedTarget: 'Affected Target',
    discoveryDate: 'Discovery Date',
    status: 'Status',
    description: 'Description',
    technicalDetails: 'Technical Details',
    exploitDetails: 'Exploit Details',
    remediationSteps: 'Remediation Steps',
    references: 'References',
    notes: 'Notes',
    actions: 'Actions',
    edit: 'Edit',
    delete: 'Delete',
    export: 'Export',
    share: 'Share',
    verify: 'Verify',
    markAsFixed: 'Mark as Fixed',
    markAsExploitable: 'Mark as Exploitable',
    markAsNotExploitable: 'Mark as Not Exploitable',
    filters: {
      all: 'All',
      open: 'Open',
      fixed: 'Fixed',
      inProgress: 'In Progress',
      verified: 'Verified',
      exploitable: 'Exploitable',
      notExploitable: 'Not Exploitable'
    },
    form: {
      namePlaceholder: 'Enter vulnerability name',
      descriptionPlaceholder: 'Enter vulnerability description',
      selectType: 'Select vulnerability type',
      selectSeverity: 'Select severity',
      cvssPlaceholder: 'Enter CVSS score',
      cvePlaceholder: 'Enter CVE ID',
      targetPlaceholder: 'Enter affected target',
      technicalDetailsPlaceholder: 'Enter technical details',
      exploitDetailsPlaceholder: 'Enter exploit details',
      remediationStepsPlaceholder: 'Enter remediation steps',
      referencesPlaceholder: 'Enter references',
      notesPlaceholder: 'Enter notes',
      submit: 'Submit'
    },
    types: {
      xss: 'Cross-Site Scripting (XSS)',
      sqli: 'SQL Injection',
      csrf: 'Cross-Site Request Forgery (CSRF)',
      rce: 'Remote Code Execution (RCE)',
      ssrf: 'Server-Side Request Forgery (SSRF)',
      idor: 'Insecure Direct Object Reference (IDOR)',
      lfi: 'Local File Inclusion (LFI)',
      rfi: 'Remote File Inclusion (RFI)',
      openRedirect: 'Open Redirect',
      brokenAuth: 'Broken Authentication',
      infoDisclosure: 'Information Disclosure',
      misconfiguration: 'Security Misconfiguration',
      businessLogic: 'Business Logic Vulnerability',
      other: 'Other'
    }
  },
  projects: {
    title: 'Bounty Projects',
    newProject: 'New Project',
    allProjects: 'All Projects',
    activeProjects: 'Active Projects',
    completedProjects: 'Completed Projects',
    projectDetails: 'Project Details',
    projectName: 'Project Name',
    projectType: 'Project Type',
    client: 'Client',
    platform: 'Platform',
    startDate: 'Start Date',
    endDate: 'End Date',
    status: 'Status',
    budget: 'Budget',
    earnings: 'Earnings',
    scope: 'Scope',
    outOfScope: 'Out of Scope',
    vulnerabilitiesFound: 'Vulnerabilities Found',
    reportsSubmitted: 'Reports Submitted',
    acceptedReports: 'Accepted Reports',
    rejectedReports: 'Rejected Reports',
    actions: 'Actions',
    edit: 'Edit',
    delete: 'Delete',
    archive: 'Archive',
    export: 'Export',
    filters: {
      all: 'All',
      active: 'Active',
      completed: 'Completed',
      archived: 'Archived'
    },
    form: {
      namePlaceholder: 'Enter project name',
      selectType: 'Select project type',
      clientPlaceholder: 'Enter client name',
      platformPlaceholder: 'Enter platform name',
      budgetPlaceholder: 'Enter project budget',
      scopePlaceholder: 'Enter project scope',
      outOfScopePlaceholder: 'Enter out-of-scope details',
      submit: 'Submit'
    },
    types: {
      publicBounty: 'Public Bounty',
      privateBounty: 'Private Bounty',
      contractedTest: 'Contracted Test',
      internal: 'Internal Project',
      other: 'Other'
    }
  },
  mcpTools: {
    title: 'MCP Tools',
    description: 'Manage and use MCP tools and services',
    mcpServer: 'MCP Server',
    startServer: 'Start Server',
    stopServer: 'Stop Server',
    availableTools: 'Available Tools',
    connections: 'Connections',
    mcpConnections: 'MCP Connections',
    noConnections: 'No active MCP connections.',
    addConnection: 'Add Connection',
    searchPlaceholder: 'Search for tools...',
    installFromGithub: 'Install from GitHub',
    installFromGithubDescription: 'Install MCP tool from a GitHub repository URL',
    githubUrl: 'GitHub URL',
    installFromFile: 'Install from File',
    installFromFileDescription: 'Install MCP tool from a local file',
    selectFile: 'Select File',
    installTypes: {
      url: 'URL',
      file: 'File',
      registry: 'Registry',
      process: 'Sub-process'
    },
    command: 'Command',
    args: 'Arguments',
    argsHint: 'Separate multiple arguments with spaces',
    commandHint: 'Please enter the full path of the executable or ensure the command is in the system PATH',
    commandNotFoundConfirm: 'Command not found in the system. Do you need help?',
    commandNotFoundHelp: 'Please try the following solutions:\n1. Ensure the command name is correct\n2. Use the full absolute path (e.g., C:\\Program Files\\app\\command.exe)\n3. Add the command\'s directory to the system PATH environment variable\n4. If it\'s an npm package, install it globally first (npm install -g package-name)',
    processConfigIncomplete: 'Please fill in name and command',
    processAddSuccess: 'MCP server added successfully',
    addServerFailed: 'Failed to add MCP server',
    exampleHeader: 'Example Configurations',
    example1: 'Command: npx, Arguments: -y @modelcontextprotocol/server-everything',
    example2: 'Command: python, Arguments: -m mcp_server',
    example3: 'Command: node, Arguments: server.js --port 8080',
    connectionFailed: 'Failed to connect to MCP server',
    initializationFailed: 'Failed to initialize MCP server',
    addServer: {
      title: 'Add MCP Server',
      quickCreate: 'Quick Create',
      importFromJson: 'Import from JSON',
      enabled: 'Enabled',
      command: 'Command',
      args: 'Arguments',
      params: 'Parameters',
      paramsPlaceholder: 'One parameter per line',
      envVars: 'Environment Variables',
      timeout: 'Timeout (seconds)',
      advancedSettings: 'Advanced Settings',
      providerName: 'Provider Name',
      providerWebsite: 'Provider Website',
      logoUrl: 'Provider Logo URL',
      jsonPaste: 'Paste JSON configuration',
      import: 'Import',
      nameRequired: 'Server name is required.',
      jsonRequired: 'JSON configuration cannot be empty.',
    },
    toolDescriptions: {
      subfinder: 'A subdomain discovery tool that discovers valid subdomains for websites',
      nuclei: 'Template-based vulnerability scanner for automated detection and validation of security vulnerabilities',
      httpx: 'A fast and multi-purpose HTTP toolkit allows to run multiple probers',
      nmap: 'Network discovery and security auditing tool',
      gobuster: 'Directory/File, DNS and VHost busting tool',
      sqlmap: 'Automatic SQL injection and database takeover tool',
      ffuf: 'Fast web fuzzer'
    },
    categories: {
      all: 'All'
    },
    serversTitle: 'MCP Servers',
    serversDescription: 'Manage and connect to Model Context Protocol (MCP) servers to extend AI capabilities.',
    myServers: 'My Servers',
    marketplace: 'Marketplace',
    endpoint: 'Endpoint/Command',
    importSuccess: 'Successfully imported server from JSON!',
    importFailed: 'Failed to import server from JSON',
    added: 'Added',
    serverDetails: {
      title: 'Server Details',
      general: 'General',
      tools: 'Tools',
      connectToViewTools: 'Please connect to the server to view its tools.',
      noTools: 'This server provides no tools.',
      inputSchema: 'Input Schema',
      paramName: 'Param Name',
      paramType: 'Type',
      paramRequired: 'Required',
      paramConstraints: 'Constraints',
    },
    updateSuccess: 'Server configuration updated successfully!',
    updateFailed: 'Failed to update server configuration',
    history: 'History',
    clearHistory: 'Clear History',
  },
  earnings: {
    title: 'Earnings',
    description: 'Track your earnings from vulnerability submissions and other activities.',
    summary: 'Summary',
    totalEarnings: 'Total Earnings',
    thisMonth: 'This Month',
    thisWeek: 'This Week',
    today: 'Today',
    earningsHistory: 'Earnings History',
    earningsByProject: 'Earnings by Project',
    earningsByVulnerability: 'Earnings by Vulnerability Type',
    earningsByPlatform: 'Earnings by Platform',
    earningsByMonth: 'Earnings by Month',
    earningDetails: 'Earning Details',
    date: 'Date',
    project: 'Project',
    vulnerability: 'Vulnerability',
    platform: 'Platform',
    amount: 'Amount',
    status: 'Status',
    paymentMethod: 'Payment Method',
    transactionId: 'Transaction ID',
    filters: {
      all: 'All',
      paid: 'Paid',
      pending: 'Pending',
      rejected: 'Rejected'
    },
    export: {
      exportData: 'Export Data',
      exportAsCsv: 'Export as CSV',
      exportAsExcel: 'Export as Excel',
      exportAsPdf: 'Export as PDF'
    },
    stats: {
      averagePerVulnerability: 'Average per Vulnerability',
      averagePerProject: 'Average per Project',
      highestPaying: 'Highest Paying',
      mostProfitablePlatform: 'Most Profitable Platform',
      mostProfitableVulnerabilityType: 'Most Profitable Vulnerability Type'
    }
  },
  submissions: {
    title: 'Submissions',
    newSubmission: 'New Submission',
    allSubmissions: 'All Submissions',
    pendingSubmissions: 'Pending Submissions',
    acceptedSubmissions: 'Accepted Submissions',
    rejectedSubmissions: 'Rejected Submissions',
    submissionDetails: 'Submission Details',
    submissionTitle: 'Submission Title',
    project: 'Project',
    platform: 'Platform',
    vulnerabilityType: 'Vulnerability Type',
    severity: 'Severity',
    submissionDate: 'Submission Date',
    status: 'Status',
    reward: 'Reward',
    description: 'Description',
    proofOfConcept: 'Proof of Concept',
    impact: 'Impact',
    remediation: 'Remediation',
    comments: 'Comments',
    actions: 'Actions',
    edit: 'Edit',
    delete: 'Delete',
    export: 'Export',
    filters: {
      all: 'All',
      pending: 'Pending',
      accepted: 'Accepted',
      rejected: 'Rejected',
      needsMoreInfo: 'Needs More Info'
    },
    form: {
      titlePlaceholder: 'Enter submission title',
      selectProject: 'Select Project',
      selectPlatform: 'Select Platform',
      selectVulnerabilityType: 'Select Vulnerability Type',
      selectSeverity: 'Select Severity',
      descriptionPlaceholder: 'Enter vulnerability description',
      pocPlaceholder: 'Enter proof of concept steps',
      impactPlaceholder: 'Enter vulnerability impact',
      remediationPlaceholder: 'Enter remediation suggestions',
      submit: 'Submit'
    },
    notifications: {
      submissionCreated: 'Submission created',
      submissionUpdated: 'Submission updated',
      submissionDeleted: 'Submission deleted',
      statusChanged: 'Status changed',
      rewardReceived: 'Reward received'
    }
  },
  sidebar: {
    dashboard: 'Dashboard',
    scanTasks: 'Scan Tasks',
    vulnerabilities: 'Vulnerabilities',
    dictionary: 'Dictionary Management',
    projects: 'Bounty Projects',
    mcpTools: 'MCP Tools',
    earnings: 'Earnings',
    submissions: 'Submissions',
    settings: 'System Settings',
    language: 'Language Settings'
  },
  dictionary: {
    title: 'Dictionary Management',
    newDictionary: 'New Dictionary',
    initializing: 'Initializing...',
    searchPlaceholder: 'Search entries...',
    entry: 'Entry',
    addTime: 'Add Time',
    operations: 'Operations',
    deleteSelected: 'Delete Selected',
    clearDictionary: 'Clear Dictionary',
    close: 'Close',
    importEntries: 'Import Entries',
    textImport: 'Text Import',
    fileImport: 'File Import',
    pasteEntries: 'Paste entries (one per line)',
    enterEntries: 'Enter one entry per line...',
    selectFile: 'Select File',
    mergeMode: 'Merge Mode',
    append: 'Append (keep existing entries)',
    replace: 'Replace (clear and import)',
    merge: 'Merge (deduplicate)',
    cancel: 'Cancel',
    importing: 'Importing...',
    import: 'Import',
    confirmDeleteDictionary: 'Are you sure you want to delete this dictionary?',
    confirmClearDictionary: 'Are you sure you want to clear this dictionary?',
    copyPostfix: ' (Copy)',
    types: {
       all: 'All',
       subdomain: 'Subdomain',
       username: 'Username',
       password: 'Password',
       path: 'Path',
       parameter: 'HTTP Parameter',
       xss_payload: 'XSS Payload',
       sql_injection: 'SQL Injection',
       custom: 'Custom'
     },
     serviceTypes: {
       web: 'Web Service',
       ssh: 'SSH Service',
       database: 'Database Service',
       ftp: 'FTP Service',
       email: 'Email Service',
       generic: 'Generic Service'
     },
     createNew: 'Create New',
     initBuiltin: 'Initialize Built-in Dictionaries',
     builtin: 'Built-in',
     wordCount: 'Word Count',
     lastUpdated: 'Last Updated',
     viewWords: 'View Words',
     manage: 'Manage',
     editDictionary: 'Edit Dictionary',
     createDictionary: 'Create Dictionary',
     name: 'Dictionary Name',
     namePlaceholder: 'Enter dictionary name',
     description: 'Description',
     descriptionPlaceholder: 'Enter dictionary description',
     type: 'Dictionary Type',
     selectType: 'Select Type',
     serviceType: 'Service Type',
     selectServiceType: 'Select Service Type (Optional)',
     isActive: 'Enable Dictionary',
     manageWords: 'Manage Words',
     addWordPlaceholder: 'Enter new word',
     addWord: 'Add',

  },
  mcp: {
    title: 'MCP Tools',
    status: 'MCP Service Status',
    running: 'Running',
    stopped: 'Stopped',
    start_server: 'Start Service',
    stop_server: 'Stop Service',
    connections: 'Connections',
    no_connections: 'No available connections',
    available_tools: 'Available Tools',
    reconnect: 'Reconnect',
    disconnect: 'Disconnect',
    fetch_connections_error: 'Failed to fetch connection list',
    disconnect_confirm_title: 'Confirm Disconnect',
    disconnect_confirm_text: 'Are you sure you want to disconnect? For services started from config, the process will be terminated.',
    disconnect_success: 'Successfully disconnected',
    disconnect_error: 'Failed to disconnect',
    reconnect_info: 'Reconnect feature is under development.',
    transport_label: 'Transport Type',
    endpoint_label: 'Endpoint',
    last_activity_label: 'Last Activity',
    error_count_label: 'Error Count',
    tools_provided_label: 'Tools Provided',
    all_tools_label: 'All Tools',
    no_tools_available: 'No tools available',
    disconnect_and_remove: 'Disconnect and Remove',
    add_server_button: 'Add Service',
    add_server_dialog_title: 'Add New Subprocess Service',
    server_name_label: 'Service Name',
    server_name_placeholder: 'e.g.: My Awesome Tool',
    command_label: 'Command',
    command_placeholder: 'e.g.: npx',
    args_label: 'Arguments',
    args_placeholder: 'e.g.: my-tool-mcp --port 8080',
    add_form_incomplete_error: 'Please fill in service name and command',
    add_server_success: 'Service added successfully, attempting to connect...',
    add_server_error: 'Failed to add service',
  },
  roles: {
    roleManagement: 'Role Management',
    newRole: 'New Role',
    editRole: 'Edit Role',
    deleteRole: 'Delete Role',
    roleTitle: 'Role Title',
    roleDescription: 'Role Description',
    rolePrompt: 'System Prompt',
    selectThisRole: 'Select This Role',
    rolesCount: 'roles',
    loadError: 'Failed to load roles',
    saveSuccess: 'Role saved successfully',
    saveError: 'Failed to save role',
    deleteConfirm: 'Are you sure you want to delete this role? This action cannot be undone.',
    deleteSuccess: 'Role deleted successfully',
    deleteError: 'Failed to delete role',
    gridView: 'Grid View',
    listView: 'List View',
    systemRoleNoEdit: 'System roles cannot be edited',
    systemRoleNoDelete: 'System roles cannot be deleted',
  },
  scanSessions: {
    title: 'Smart Scan Sessions',
    description: 'Manage and monitor smart scan sessions',
    newSession: 'New Session',
    allSessions: 'All Sessions',
    activeSessions: 'Active Sessions',
    completedSessions: 'Completed Sessions',
    sessionDetails: 'Session Details',
    sessionName: 'Session Name',
    target: 'Target',
    sessionType: 'Session Type',
    status: 'Status',
    currentStage: 'Current Stage',
    progress: 'Progress',
    assetsFound: 'Assets Found',
    vulnerabilitiesFound: 'Vulnerabilities Found',
    startTime: 'Start Time',
    endTime: 'End Time',
    duration: 'Duration',
    actions: 'Actions',
    start: 'Start',
    pause: 'Pause',
    stop: 'Stop',
    resume: 'Resume',
    delete: 'Delete',
    viewDetails: 'View Details',
    exportReport: 'Export Report',
    clone: 'Clone',
    filters: {
      all: 'All',
      active: 'Active',
      paused: 'Paused',
      completed: 'Completed',
      failed: 'Failed'
    },
    statusLabels: {
      pending: 'Pending',
      running: 'Running',
      paused: 'Paused',
      completed: 'Completed',
      failed: 'Failed',
      stopped: 'Stopped'
    },
    types: {
      comprehensive: 'Comprehensive Scan',
      targeted: 'Targeted Scan',
      quick: 'Quick Scan',
      deep: 'Deep Scan',
      custom: 'Custom Scan',
      subdomain: 'Subdomain Scan',
      port: 'Port Scan',
      vulnerability: 'Vulnerability Scan'
    },
    stages: {
      reconnaissance: 'Reconnaissance',
      discovery: 'Discovery',
      enumeration: 'Enumeration',
      vulnerability_scanning: 'Vulnerability Scanning',
      exploitation: 'Exploitation',
      post_exploitation: 'Post Exploitation',
      reporting: 'Report Generation',
      subdomainDiscovery: 'Subdomain Discovery',
      portScanning: 'Port Scanning',
      serviceDetection: 'Service Detection',
      vulnerabilityScanning: 'Vulnerability Scanning',
      aiAnalysis: 'AI Analysis'
    },
    form: {
      sessionNamePlaceholder: 'Enter session name',
      targetPlaceholder: 'Enter target domain or IP',
      selectType: 'Select scan type',
      enableSubdomains: 'Include subdomains',
      maxDepth: 'Max depth',
      timeout: 'Timeout (minutes)',
      customConfig: 'Custom configuration',
      submit: 'Create Session',
      cancel: 'Cancel',
      namePlaceholder: 'Enter session name'
    },
    details: {
      sessionId: 'Session ID',
      configuration: 'Configuration',
      scanResults: 'Scan Results',
      logs: 'Logs',
      timeline: 'Timeline',
      assets: 'Assets',
      vulnerabilities: 'Vulnerabilities',
      reports: 'Reports'
    },
    messages: {
      sessionCreated: 'Session created successfully',
      sessionStarted: 'Session started successfully',
      sessionPaused: 'Session paused',
      sessionStopped: 'Session stopped',
      sessionDeleted: 'Session deleted',
      sessionCloned: 'Session cloned successfully',
      reportExported: 'Report exported successfully',
      operationFailed: 'Operation failed',
      confirmDelete: 'Are you sure you want to delete this session? This action cannot be undone.',
      confirmStop: 'Are you sure you want to stop this session?',
      createFailed: 'Failed to create session'
    },
    targetUrl: 'Target URL',
    scanType: 'Scan Type',
    scanDepth: 'Scan Depth',
    maxConcurrency: 'Max Concurrency',
    enableAI: 'Enable AI Analysis',
    autoOptimize: 'Auto Optimize',
    configuration: 'Configuration',
    scanStages: 'Scan Stages',
    createdAt: 'Created At',
    estimatedTime: 'Estimated Time Remaining',
    domains: 'Domains',
    ports: 'Ports',
    paused: 'Paused',
    viewReport: 'View Report',
    export: 'Export',
    notifications: {
      createFailed: 'Failed to create session'
    },
    depth: {
      shallow: 'Shallow Scan',
      medium: 'Medium Depth',
      deep: 'Deep Scan'
    }
  }
}