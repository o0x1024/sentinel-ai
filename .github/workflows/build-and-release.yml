name: Build and Release Sentinel AI

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # 代码质量检查
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Frontend Dependencies
        run: npm ci

      - name: Lint Frontend
        run: npm run lint

      - name: Type Check Frontend
        run: npm run type-check

      - name: Test Frontend
        run: npm run test:unit

      - name: Lint Rust Code
        run: |
          cd src-tauri
          cargo fmt --all -- --check
          cargo clippy --all-targets --all-features -- -D warnings

      - name: Test Rust Code
        run: |
          cd src-tauri
          cargo test --verbose

  # 多平台构建
  build:
    name: Build for ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    needs: lint-and-test
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            os: 'macos-latest'
            target: 'universal-apple-darwin'
            bundles: 'app,dmg'
          - platform: 'ubuntu-20.04'
            os: 'ubuntu-20.04'
            target: 'x86_64-unknown-linux-gnu'
            bundles: 'deb,appimage'
          - platform: 'windows-latest'
            os: 'windows-latest'
            target: 'x86_64-pc-windows-msvc'
            bundles: 'msi,nsis'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Linux Dependencies
        if: matrix.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Cache Rust Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Frontend Dependencies
        run: npm ci

      - name: Build Frontend
        run: npm run build
        env:
          NODE_ENV: production

      - name: Build Tauri App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENABLE_CODE_SIGNING: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'Sentinel AI v__VERSION__'
          releaseBody: |
            ## Sentinel AI v__VERSION__
            
            ### 🚀 新功能
            - AI驱动的漏洞发现
            - MCP工具动态集成
            - 性能优化和监控
            
            ### 🔧 改进
            - 提升构建性能
            - 优化内存使用
            - 增强错误处理
            
            ### 📦 平台支持
            - Windows (x64)
            - macOS (Universal)
            - Linux (x64)
            
            完整更新日志请查看 [CHANGELOG.md](CHANGELOG.md)
          releaseDraft: true
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          includeUpdaterJson: true
          updaterJsonPreferNsis: true
          args: --target ${{ matrix.target }} --bundles ${{ matrix.bundles }}

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.platform }}-build
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/
            !src-tauri/target/${{ matrix.target }}/release/bundle/**/*.dSYM

  # 性能基准测试
  benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Dependencies
        run: npm ci

      - name: Run Frontend Benchmarks
        run: npm run benchmark

      - name: Run Rust Benchmarks
        run: |
          cd src-tauri
          cargo bench --bench performance

      - name: Comment Benchmark Results
        uses: benchmark-action/github-action-benchmark@v1
        if: github.event_name == 'pull_request'
        with:
          tool: 'cargo'
          output-file-path: src-tauri/target/criterion/report/benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          comment-on-alert: true
          fail-on-alert: true

  # 安全扫描
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Frontend Security Audit
        run: npm audit --audit-level high

      - name: Run Rust Security Audit
        uses: rustsec/audit-check@v1.4.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, rust

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # 部署到预发布环境
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ubuntu-20.04-build
          path: ./staging-release

      - name: Deploy to Staging Server
        run: |
          echo "部署到预发布环境"
          # 这里可以添加实际的部署脚本
          ls -la ./staging-release

  # 发布到生产环境
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            src-tauri/target/*/release/bundle/*/*
          generate_release_notes: true
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

      - name: Notify Success
        run: |
          echo "🎉 Sentinel AI ${{ github.ref_name }} 已成功发布!" 