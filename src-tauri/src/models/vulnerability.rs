use serde::{Deserialize, Serialize};
use chrono::{DateTime, Utc};
use uuid::Uuid;
use crate::models::scan::Severity;

/// 漏洞信息
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Vulnerability {
    pub id: Uuid,
    pub title: String,
    pub description: String,
    pub severity: Severity,
    pub cvss_score: Option<f32>,
    pub cve_id: Option<String>,
    pub cwe_id: Option<String>,
    pub vulnerability_type: VulnerabilityType,
    pub target: String,
    pub url: Option<String>,
    pub method: Option<String>,
    pub parameters: Option<String>,
    pub payload: Option<String>,
    pub evidence: Option<String>,
    pub status: VulnerabilityStatus,
    pub discovered_at: DateTime<Utc>,
    pub verified_at: Option<DateTime<Utc>>,
    pub reported_at: Option<DateTime<Utc>>,
    pub fixed_at: Option<DateTime<Utc>>,
    pub scan_task_id: Option<Uuid>,
    pub tags: Vec<String>,
    pub references: Vec<String>,
    pub remediation: Option<String>,
}

/// 漏洞类型
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum VulnerabilityType {
    Xss,                    // 跨站脚本
    SqlInjection,          // SQL注入
    Csrf,                  // 跨站请求伪造
    Lfi,                   // 本地文件包含
    Rfi,                   // 远程文件包含
    CommandInjection,      // 命令注入
    DirectoryTraversal,    // 目录遍历
    Ssrf,                  // 服务端请求伪造
    Xxe,                   // XML外部实体
    Deserialization,       // 反序列化
    AuthenticationBypass,  // 认证绕过
    AuthorizationBypass,   // 授权绕过
    InformationDisclosure, // 信息泄露
    BusinessLogic,         // 业务逻辑
    ConfigurationError,    // 配置错误
    CryptographicIssue,   // 加密问题
    Other(String),         // 其他类型
}

impl std::fmt::Display for VulnerabilityType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            VulnerabilityType::Xss => "xss",
            VulnerabilityType::SqlInjection => "sql_injection",
            VulnerabilityType::Csrf => "csrf",
            VulnerabilityType::Lfi => "lfi",
            VulnerabilityType::Rfi => "rfi",
            VulnerabilityType::CommandInjection => "command_injection",
            VulnerabilityType::DirectoryTraversal => "directory_traversal",
            VulnerabilityType::Ssrf => "ssrf",
            VulnerabilityType::Xxe => "xxe",
            VulnerabilityType::Deserialization => "deserialization",
            VulnerabilityType::AuthenticationBypass => "authentication_bypass",
            VulnerabilityType::AuthorizationBypass => "authorization_bypass",
            VulnerabilityType::InformationDisclosure => "information_disclosure",
            VulnerabilityType::BusinessLogic => "business_logic",
            VulnerabilityType::ConfigurationError => "configuration_error",
            VulnerabilityType::CryptographicIssue => "cryptographic_issue",
            VulnerabilityType::Other(custom) => custom,
        };
        write!(f, "{}", s)
    }
}

impl VulnerabilityType {
    pub fn from_string(s: &str) -> Self {
        match s.to_lowercase().as_str() {
            "xss" => VulnerabilityType::Xss,
            "sql_injection" => VulnerabilityType::SqlInjection,
            "csrf" => VulnerabilityType::Csrf,
            "lfi" => VulnerabilityType::Lfi,
            "rfi" => VulnerabilityType::Rfi,
            "command_injection" => VulnerabilityType::CommandInjection,
            "directory_traversal" => VulnerabilityType::DirectoryTraversal,
            "ssrf" => VulnerabilityType::Ssrf,
            "xxe" => VulnerabilityType::Xxe,
            "deserialization" => VulnerabilityType::Deserialization,
            "authentication_bypass" => VulnerabilityType::AuthenticationBypass,
            "authorization_bypass" => VulnerabilityType::AuthorizationBypass,
            "information_disclosure" => VulnerabilityType::InformationDisclosure,
            "business_logic" => VulnerabilityType::BusinessLogic,
            "configuration_error" => VulnerabilityType::ConfigurationError,
            "cryptographic_issue" => VulnerabilityType::CryptographicIssue,
            other => VulnerabilityType::Other(other.to_string()),
        }
    }
}

/// 漏洞状态
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum VulnerabilityStatus {
    New,          // 新发现
    Triaging,     // 分析中
    Verified,     // 已验证
    FalsePositive, // 误报
    Duplicate,    // 重复
    Reported,     // 已报告
    Accepted,     // 已接受
    Fixed,        // 已修复
    Wontfix,      // 不修复
    Closed,       // 已关闭
}

impl std::fmt::Display for VulnerabilityStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            VulnerabilityStatus::New => "new",
            VulnerabilityStatus::Triaging => "triaging",
            VulnerabilityStatus::Verified => "verified",
            VulnerabilityStatus::FalsePositive => "false_positive",
            VulnerabilityStatus::Duplicate => "duplicate",
            VulnerabilityStatus::Reported => "reported",
            VulnerabilityStatus::Accepted => "accepted",
            VulnerabilityStatus::Fixed => "fixed",
            VulnerabilityStatus::Wontfix => "wontfix",
            VulnerabilityStatus::Closed => "closed",
        };
        write!(f, "{}", s)
    }
}

impl VulnerabilityStatus {
    pub fn to_lowercase(&self) -> String {
        self.to_string()
    }

    pub fn from_string(s: &str) -> Self {
        match s.to_lowercase().as_str() {
            "new" => VulnerabilityStatus::New,
            "triaging" => VulnerabilityStatus::Triaging,
            "verified" => VulnerabilityStatus::Verified,
            "false_positive" => VulnerabilityStatus::FalsePositive,
            "duplicate" => VulnerabilityStatus::Duplicate,
            "reported" => VulnerabilityStatus::Reported,
            "accepted" => VulnerabilityStatus::Accepted,
            "fixed" => VulnerabilityStatus::Fixed,
            "wontfix" => VulnerabilityStatus::Wontfix,
            "closed" => VulnerabilityStatus::Closed,
            _ => VulnerabilityStatus::New,
        }
    }
}

/// 漏洞报告
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VulnerabilityReport {
    pub id: Uuid,
    pub vulnerability_id: Uuid,
    pub title: String,
    pub content: String,
    pub format: ReportFormat,
    pub template: String,
    pub generated_at: DateTime<Utc>,
    pub file_path: Option<String>,
    pub exported: bool,
}

/// 报告格式
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum ReportFormat {
    Markdown,
    Html,
    Pdf,
    Json,
    Xml,
}

impl std::fmt::Display for ReportFormat {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            ReportFormat::Markdown => "markdown",
            ReportFormat::Html => "html",
            ReportFormat::Pdf => "pdf",
            ReportFormat::Json => "json",
            ReportFormat::Xml => "xml",
        };
        write!(f, "{}", s)
    }
}

impl ReportFormat {
    pub fn from_string(s: &str) -> Self {
        match s.to_lowercase().as_str() {
            "markdown" => ReportFormat::Markdown,
            "html" => ReportFormat::Html,
            "pdf" => ReportFormat::Pdf,
            "json" => ReportFormat::Json,
            "xml" => ReportFormat::Xml,
            _ => ReportFormat::Markdown,
        }
    }
}

/// 漏洞统计
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VulnerabilityStats {
    pub total: u64,
    pub by_severity: std::collections::HashMap<String, u64>,
    pub by_type: std::collections::HashMap<String, u64>,
    pub by_status: std::collections::HashMap<String, u64>,
    pub new_this_week: u64,
    pub fixed_this_week: u64,
    pub avg_fix_time_days: f64,
}

/// CVSS评分
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct CvssScore {
    pub version: String, // "3.1", "2.0"
    pub vector: String,
    pub base_score: f32,
    pub temporal_score: Option<f32>,
    pub environmental_score: Option<f32>,
    pub exploitability: f32,
    pub impact: f32,
} 