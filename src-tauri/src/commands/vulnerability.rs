use serde_json::Value;
use uuid::Uuid;
use tauri::State;
use std::sync::Arc;
use crate::services::vulnerability::VulnerabilityService;
use crate::models::database::Vulnerability;

/// 获取漏洞列表
#[tauri::command]
pub async fn list_vulnerabilities(
    filter: Option<String>,
    vulnerability_service: State<'_, Arc<VulnerabilityService>>,
) -> Result<Vec<Vulnerability>, String> {
    vulnerability_service
        .list_vulnerabilities(filter)
        .await
        .map_err(|e| e.to_string())
}

/// 获取漏洞详情
#[tauri::command]
pub async fn get_vulnerability(
    vuln_id: String,
    vulnerability_service: State<'_, Arc<VulnerabilityService>>,
) -> Result<Vulnerability, String> {
    let vuln_uuid = Uuid::parse_str(&vuln_id).map_err(|e| e.to_string())?;
    vulnerability_service
        .get_vulnerability(vuln_uuid)
        .await
        .map_err(|e| e.to_string())
}

/// 更新漏洞状态
#[tauri::command]
pub async fn update_vulnerability_status(
    vuln_id: String,
    status: String,
    vulnerability_service: State<'_, Arc<VulnerabilityService>>,
) -> Result<(), String> {
    let vuln_uuid = Uuid::parse_str(&vuln_id).map_err(|e| e.to_string())?;
    vulnerability_service
        .update_status(vuln_uuid, status)
        .await
        .map_err(|e| e.to_string())
}

/// 生成漏洞报告
#[tauri::command]
pub async fn generate_vulnerability_report(
    vuln_id: String,
    template: Option<String>,
    vulnerability_service: State<'_, Arc<VulnerabilityService>>,
) -> Result<String, String> {
    let vuln_uuid = Uuid::parse_str(&vuln_id).map_err(|e| e.to_string())?;
    vulnerability_service
        .generate_report(vuln_uuid, template)
        .await
        .map_err(|e| e.to_string())
}

/// 验证漏洞
#[tauri::command]
pub async fn verify_vulnerability(
    vuln_id: String,
    vulnerability_service: State<'_, Arc<VulnerabilityService>>,
) -> Result<bool, String> {
    let vuln_uuid = Uuid::parse_str(&vuln_id).map_err(|e| e.to_string())?;
    vulnerability_service
        .verify_vulnerability(vuln_uuid)
        .await
        .map_err(|e| e.to_string())
}

/// 删除漏洞
#[tauri::command]
pub async fn delete_vulnerability(
    vuln_id: String,
    vulnerability_service: State<'_, Arc<VulnerabilityService>>,
) -> Result<(), String> {
    let vuln_uuid = Uuid::parse_str(&vuln_id).map_err(|e| e.to_string())?;
    vulnerability_service
        .delete_vulnerability(vuln_uuid)
        .await
        .map_err(|e| e.to_string())
}

/// 获取漏洞统计信息
#[tauri::command]
pub async fn get_vulnerability_stats(
    vulnerability_service: State<'_, Arc<VulnerabilityService>>,
) -> Result<serde_json::Value, String> {
    vulnerability_service
        .get_statistics()
        .await
        .map_err(|e| e.to_string())
} 